(()=>{"use strict";const t=class{constructor(){this.translations={pl:{},en:{}},this.currentLanguage=localStorage.getItem("preferredLanguage")||"pl",this.addLanguageListeners(),this.loadPreferredLanguage()}async fetchTranslations(t){const e=`./translates/${document.body.getAttribute("data-page")}-${t}.json`;try{const t=await fetch(e);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return await t.json()}catch(e){return console.error(`Error loading translations for ${t}:`,e),{}}}async loadTranslations(t){const e=await this.fetchTranslations(t);this.translations[t]=e,this.translatePage(t)}setLanguage(t){localStorage.setItem("preferredLanguage",t),this.currentLanguage=t,this.loadTranslations(t),this.updateLanguageButtons(t),document.dispatchEvent(new CustomEvent("languageChanged",{detail:{language:t}}))}loadPreferredLanguage(){this.loadTranslations(this.currentLanguage),this.updateLanguageButtons(this.currentLanguage)}translatePage(t){document.querySelectorAll("[data-lang-key]").forEach((e=>{const a=e.getAttribute("data-lang-key");this.translations[t][a]?e.innerHTML=this.translations[t][a]:(console.warn(`Missing translation for key: ${a}`),e.innerHTML=`[${a}]`)})),document.querySelectorAll("[data-placeholder-key]").forEach((e=>{const a=e.getAttribute("data-placeholder-key");this.translations[t][a]?e.placeholder=this.translations[t][a]:console.warn(`Missing placeholder translation for key: ${a}`)})),document.querySelectorAll("select option").forEach((e=>{const a=e.getAttribute("data-lang-key");this.translations[t][a]?e.textContent=this.translations[t][a]:a&&(console.warn(`Missing option translation for key: ${a}`),e.textContent=`[${a}]`)})),document.documentElement.lang=t}addLanguageListeners(){const t=document.getElementById("lang-pl"),e=document.getElementById("lang-en");t?t.addEventListener("click",(()=>this.setLanguage("pl"))):console.warn("Polish language button not found"),e?e.addEventListener("click",(()=>this.setLanguage("en"))):console.warn("English language button not found")}updateLanguageButtons(t){const e=document.getElementById("lang-pl"),a=document.getElementById("lang-en");e&&e.classList.remove("active"),a&&a.classList.remove("active"),"pl"===t&&e?e.classList.add("active"):"en"===t&&a&&a.classList.add("active")}};const e=class{constructor(){this.apiUrl=""}async getTransactions(){try{const t=await axios.get("/api/transactions");return t.data.map((t=>{const e=new Date(t.date),a=`${e.getFullYear()}-${String(e.getMonth()+1).padStart(2,"0")}-${String(e.getDate()).padStart(2,"0")}`;return{...t,id:t._id,date:a}}))}catch(t){throw console.error("Error fetching transactions from MongoDB:",t),t}}async addTransaction(t){try{const e=(await axios.post("/api/transactions",t)).data;return{...e,id:e._id}}catch(t){throw console.error("Błąd podczas dodawania transakcji do MongoDB:",t),t}}async deleteTransaction(t){try{await axios.delete(`/api/transactions/${t}`)}catch(t){throw console.error("Error while deleting transaction from MongoDB:",t),t}}async deleteAllTransactions(){try{const t=(await this.getTransactions()).map((t=>this.deleteTransaction(t.id)));await Promise.all(t)}catch(t){throw console.error("Błąd podczas usuwania wszystkich transakcji z MongoDB:",t),t}}};const a=class{constructor(){this.dbName="transactionsDB",this.dbVersion=1,this.db=null,this.initializeDB()}initializeDB(){const t=indexedDB.open(this.dbName,this.dbVersion);t.onupgradeneeded=t=>{const e=t.target.result;if(!e.objectStoreNames.contains("transactions")){e.createObjectStore("transactions",{keyPath:"id",autoIncrement:!0}).createIndex("isSynced","isSynced",{unique:!1})}},t.onsuccess=t=>{this.db=t.target.result,console.log("IndexedDB initialized.")},t.onerror=t=>{console.error("Error initializing IndexedDB:",t.target.error)}}async getDB(){return this.db?this.db:new Promise(((t,e)=>{const a=indexedDB.open(this.dbName,this.dbVersion);a.onsuccess=e=>{this.db=e.target.result,t(this.db)},a.onerror=t=>{e(t.target.error)}}))}async getTransactions(){const t=await this.getDB();return new Promise(((e,a)=>{const n=t.transaction("transactions","readonly").objectStore("transactions").getAll();n.onsuccess=()=>{const t=n.result.map((t=>({...t,id:t.id.toString()})));console.log("Fetched transactions from IndexedDB:",t),e(t)},n.onerror=t=>{console.error("Error fetching transactions from IndexedDB:",t.target.error),a(t.target.error)}}))}async getUnsyncedTransactions(){const t=await this.getDB();return new Promise(((e,a)=>{const n=t.transaction("transactions","readonly").objectStore("transactions").index("isSynced").getAll(IDBKeyRange.only(!1));n.onsuccess=()=>{const t=n.result.map((t=>({...t,id:t.id.toString()})));e(t)},n.onerror=t=>a(t.target.error)}))}async markTransactionAsSynced(t){const e=await this.getDB();return new Promise(((a,n)=>{const s=e.transaction("transactions","readwrite").objectStore("transactions"),i=Number(t),o=s.get(i);o.onsuccess=t=>{const e=t.target.result;if(e){e.isSynced=!0;const t=s.put(e);t.onsuccess=()=>a(),t.onerror=t=>n(t)}else a()},o.onerror=t=>n(t.target.error)}))}async addTransaction(t){const e=await this.getDB();return new Promise(((a,n)=>{const s=e.transaction("transactions","readwrite").objectStore("transactions"),i={...t,isSynced:t.isSynced||!1},o=s.add(i);o.onsuccess=t=>{i.id=t.target.result.toString(),a(i)},o.onerror=t=>{n(t.target.error)}}))}async deleteTransaction(t){const e=await this.getDB();return new Promise(((a,n)=>{const s=e.transaction("transactions","readwrite").objectStore("transactions"),i=Number(t),o=s.delete(i);o.onsuccess=()=>{a()},o.onerror=t=>{n(t.target.error)}}))}async deleteAllTransactions(){const t=await this.getDB();return new Promise(((e,a)=>{const n=t.transaction("transactions","readwrite").objectStore("transactions").clear();n.onsuccess=()=>{e()},n.onerror=t=>{a(t.target.error)}}))}};const n=class{constructor(){this.mongoDBManager=new e,this.indexedDBManager=new a,this.serverAvailable=!0,this.startServerAvailabilityChecks()}startServerAvailabilityChecks(){this.checkServerAvailability(),this.serverCheckInterval=setInterval((()=>{this.checkServerAvailability()}),5e3)}async checkServerAvailability(){try{const t=new AbortController,e=setTimeout((()=>t.abort()),2e3),a=await fetch("/ping",{signal:t.signal});clearTimeout(e),this.serverAvailable=a.ok}catch(t){this.serverAvailable=!1}}async getTransactions(){if(!this.serverAvailable)return await this.indexedDBManager.getTransactions();try{return await this.mongoDBManager.getTransactions()}catch(t){return console.error("Failed to get transactions from MongoDB, falling back to IndexedDB:",t),this.serverAvailable=!1,await this.indexedDBManager.getTransactions()}}async addTransaction(t){if(!this.serverAvailable)return this.indexedDBManager.addTransaction(t);try{return await this.mongoDBManager.addTransaction(t)}catch(e){return console.error("Error adding transaction to MongoDB, falling back to IndexedDB:",e),this.serverAvailable=!1,await this.indexedDBManager.addTransaction(t)}}async deleteTransaction(t){if(!this.serverAvailable)return this.indexedDBManager.deleteTransaction(t);try{return await this.mongoDBManager.deleteTransaction(t)}catch(e){return console.error("Error deleting transaction from MongoDB, falling back to IndexedDB:",e),this.serverAvailable=!1,await this.indexedDBManager.deleteTransaction(t)}}async deleteAllTransactions(){if(!this.serverAvailable)return this.indexedDBManager.deleteAllTransactions();try{return await this.mongoDBManager.deleteAllTransactions()}catch(t){return console.error("Error deleting all transactions from MongoDB, falling back to IndexedDB:",t),this.serverAvailable=!1,await this.indexedDBManager.deleteAllTransactions()}}async getUnsyncedTransactions(){return this.indexedDBManager.getUnsyncedTransactions()}async markTransactionAsSynced(t){return this.indexedDBManager.markTransactionAsSynced(t)}async syncTransactions(){if(this.serverAvailable)try{const t=await this.indexedDBManager.getUnsyncedTransactions();console.log("Unsynced transactions:",t);for(const e of t)try{const t=await this.mongoDBManager.addTransaction(e);await this.indexedDBManager.markTransactionAsSynced(e.id),console.log("Transaction synchronized:",t)}catch(t){console.error("Error synchronizing transaction:",e,t)}}catch(t){console.error("Error during synchronization:",t)}}};const s=class{constructor(){this.databaseManager=new n,this.transactions=[],this.currencyCode="PLN",this.currencySymbol="zł";const t=localStorage.getItem("preferredLanguage")||"pl";this.updateCurrencyBasedOnLanguage(t),this.serverAvailable=this.databaseManager.serverAvailable,setInterval((()=>{this.serverAvailable!==this.databaseManager.serverAvailable&&(this.serverAvailable=this.databaseManager.serverAvailable,this.serverAvailable&&(console.log("Serwer jest teraz dostępny. Rozpoczynam synchronizację..."),this.syncTransactions()))}),1e3),window.addEventListener("online",(async()=>{console.log("Połączenie online przywrócone. Rozpoczynam synchronizację..."),await this.syncTransactions()})),console.log("Czy aplikacja jest online?",navigator.onLine),window.addEventListener("languageChange",(()=>{const t=localStorage.getItem("preferredLanguage")||"pl";this.updateCurrencyBasedOnLanguage(t),window.dispatchEvent(new Event("transactionsUpdated"))})),this.loadTransactions()}updateCurrencyBasedOnLanguage(t){const e={pl:{code:"PLN",symbol:"zł"},en:{code:"USD",symbol:"$"}},a=e[t]||e.pl;this.currencyCode=a.code,this.currencySymbol=a.symbol}async loadTransactions(){try{console.log("Rozpoczynam ładowanie transakcji...");const t=await this.databaseManager.getTransactions();console.log("Pobrane transakcje z IndexedDB:",t),this.transactions=t,console.log("Załadowane transakcje:",this.transactions),window.dispatchEvent(new Event("transactionsLoaded"))}catch(t){console.error("Błąd podczas ładowania transakcji:",t)}}async createNewTransaction(t,e,a){const n={name:t,amount:parseFloat(e),category:a,date:(new Date).toISOString().split("T")[0],currencyCode:this.currencyCode};try{const t=await this.databaseManager.addTransaction(n);return this.transactions.push(t),window.dispatchEvent(new Event("transactionAdded")),t}catch(t){throw console.error("Błąd podczas tworzenia transakcji:",t),t}}async deleteTransaction(t){try{await this.databaseManager.deleteTransaction(t),this.transactions=this.transactions.filter((e=>e.id!==t)),window.dispatchEvent(new Event("transactionDeleted"))}catch(t){console.error("Error while deleting transaction:",t)}}async deleteAllTransactions(){try{await this.databaseManager.deleteAllTransactions(),this.transactions=[],window.dispatchEvent(new Event("transactionsCleared"))}catch(t){console.error("Błąd podczas usuwania wszystkich transakcji:",t)}}async syncTransactions(){if(this.serverAvailable)try{const t=await this.databaseManager.getUnsyncedTransactions();for(const e of t)try{const t=await this.databaseManager.mongoDBManager.addTransaction(e);await this.databaseManager.markTransactionAsSynced(e.id),console.log("Zsynchronizowano transakcję:",t)}catch(t){console.error("Błąd synchronizacji transakcji:",e,t)}await this.loadTransactions()}catch(t){console.error("Błąd podczas synchronizacji:",t)}}getCurrentBalance(){return this.transactions.reduce(((t,e)=>t+e.amount),0)}};const i=class{constructor(t){this.transactionManager=t,this.chart=null,this.initializeChart(),this.setupLanguageChangeListener(),this.setupResizeListener(),window.addEventListener("themeChange",(t=>{const e="dark"===t.detail.theme;this.setTheme(e)}))}initializeChart(){const t=document.getElementById("balanceChart").getContext("2d"),e=t.createLinearGradient(0,0,0,400);e.addColorStop(0,"rgba(52, 152, 219, 0.6)"),e.addColorStop(1,"rgba(52, 152, 219, 0.1)"),this.chart=new Chart(t,{type:"line",data:{labels:[],datasets:[{label:"Balance",data:[],backgroundColor:e,borderColor:"rgba(52, 152, 219, 1)",borderWidth:2,tension:.4,pointBackgroundColor:"rgba(52, 152, 219, 1)",pointBorderColor:"#fff",pointHoverBackgroundColor:"#fff",pointHoverBorderColor:"rgba(52, 152, 219, 1)",fill:!0,pointRadius:4,pointHoverRadius:6,pointStyle:"circle"},{label:"Income",data:[],backgroundColor:"rgba(46, 204, 113, 0.2)",borderColor:"rgba(46, 204, 113, 1)",borderWidth:2,tension:.4,pointBackgroundColor:"rgba(46, 204, 113, 1)",pointBorderColor:"#fff",pointHoverBackgroundColor:"#fff",pointHoverBorderColor:"rgba(46, 204, 113, 1)",fill:!1,pointRadius:4,pointHoverRadius:6,pointStyle:"circle",hidden:!0},{label:"Expenses",data:[],backgroundColor:"rgba(231, 76, 60, 0.2)",borderColor:"rgba(231, 76, 60, 1)",borderWidth:2,tension:.4,pointBackgroundColor:"rgba(231, 76, 60, 1)",pointBorderColor:"#fff",pointHoverBackgroundColor:"#fff",pointHoverBorderColor:"rgba(231, 76, 60, 1)",fill:!1,pointRadius:4,pointHoverRadius:6,pointStyle:"circle",hidden:!0}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{title:{display:!1},legend:{position:"top",align:"center",onClick:(t,e)=>{const a=e.datasetIndex,n=this.chart,s=n.getDatasetMeta(a);s.hidden=null===s.hidden?!n.data.datasets[a].hidden:null,n.update()},labels:{font:{size:this.getResponsiveFontSize(12),family:"'Poppins', sans-serif",weight:"600"},color:"#34495e",usePointStyle:!0,padding:this.getResponsivePadding(15)},onHover:(t,e)=>{t.native.target.style.cursor="pointer"}},tooltip:{backgroundColor:"rgba(52, 73, 94, 0.8)",titleFont:{size:this.getResponsiveFontSize(14),weight:"600",family:"'Poppins', sans-serif"},bodyFont:{size:this.getResponsiveFontSize(12),family:"'Poppins', sans-serif"},callbacks:{label:t=>{let e=t.dataset.label||"";return e&&(e+=": "),null!==t.parsed.y&&(e+=new Intl.NumberFormat(void 0,{style:"currency",currency:this.transactionManager.currencyCode}).format(t.parsed.y)),e}}}},scales:{x:{title:{display:!0,text:"Date",font:{size:this.getResponsiveFontSize(14),weight:"600",family:"'Poppins', sans-serif"},color:"#34495e"},ticks:{color:"#34495e",font:{family:"'Poppins', sans-serif",size:this.getResponsiveFontSize(10)},maxRotation:0,minRotation:0,maxTicksLimit:this.getResponsiveTicksLimit()},grid:{display:!1}},y:{beginAtZero:!0,title:{display:!0,font:{size:this.getResponsiveFontSize(14),weight:"600",family:"'Poppins', sans-serif"},color:"#34495e"},ticks:{color:"#34495e",font:{family:"'Poppins', sans-serif",size:this.getResponsiveFontSize(10)},callback:t=>new Intl.NumberFormat(void 0,{style:"currency",currency:this.transactionManager.currencyCode}).format(t)},grid:{borderDash:[5,5],color:"rgba(52, 73, 94, 0.1)"}}},animation:{duration:1500,easing:"easeInOutQuart"},hover:{animationDuration:300},responsiveAnimationDuration:300}}),this.updateLanguage()}getResponsiveFontSize(t){const e=window.innerWidth;return e<768?.8*t:e<1024?.9*t:t}getResponsivePadding(t){const e=window.innerWidth;return e<768?.6*t:e<1024?.8*t:t}getResponsiveTicksLimit(){const t=window.innerWidth;return t<768?4:t<1024?6:8}updateChart(){const t=this.transactionManager.transactions||[];if(0===t.length)return void console.log("Brak danych do zaktualizowania wykresu.");const e=t.map((t=>new Date(t.date).toISOString().split("T")[0])),a=t.reduce(((t,e)=>{const a=t.length>0?t[t.length-1]:0;return t.push(a+e.amount),t}),[]);console.log("Dane do wykresu (saldo):",a),this.chart.data.labels=e,this.chart.data.datasets[0].data=a,this.chart.data.datasets[1].data=[],this.chart.data.datasets[2].data=[],this.chart.update()}setTheme(t){const e=t?"#ecf0f1":"#34495e",a=t?"rgba(236, 240, 241, 0.1)":"rgba(52, 73, 94, 0.1)";this.chart.options.plugins.legend.labels.color=e,this.chart.options.scales.x.title.color=e,this.chart.options.scales.y.title.color=e,this.chart.options.scales.x.ticks.color=e,this.chart.options.scales.y.ticks.color=e,this.chart.options.scales.x.grid.color=a,this.chart.options.scales.y.grid.color=a,this.chart.data.datasets[0].backgroundColor=t?t=>{const e=t.chart.ctx.createLinearGradient(0,0,0,400);return e.addColorStop(0,"rgba(52, 152, 219, 0.4)"),e.addColorStop(1,"rgba(52, 152, 219, 0.05)"),e}:t=>{const e=t.chart.ctx.createLinearGradient(0,0,0,400);return e.addColorStop(0,"rgba(52, 152, 219, 0.6)"),e.addColorStop(1,"rgba(52, 152, 219, 0.1)"),e},this.chart.update()}updateLanguage(){const t=localStorage.getItem("preferredLanguage");this.chart.options.scales.x.title.text="pl"===t?"Data":"Date",this.chart.data.datasets[0].label="pl"===t?"Saldo":"Balance",this.chart.data.datasets[1].label="pl"===t?"Przychody":"Income",this.chart.data.datasets[2].label="pl"===t?"Wydatki":"Expenses",this.chart.update()}setupLanguageChangeListener(){window.addEventListener("languageChange",(()=>{this.updateLanguage()}))}setupResizeListener(){window.addEventListener("resize",(()=>{this.updateResponsiveSettings()}))}updateResponsiveSettings(){this.chart.options.plugins.legend.labels.font.size=this.getResponsiveFontSize(12),this.chart.options.plugins.legend.labels.padding=this.getResponsivePadding(15),this.chart.options.plugins.tooltip.titleFont.size=this.getResponsiveFontSize(14),this.chart.options.plugins.tooltip.bodyFont.size=this.getResponsiveFontSize(12),this.chart.options.scales.x.title.font.size=this.getResponsiveFontSize(14),this.chart.options.scales.x.ticks.font.size=this.getResponsiveFontSize(10),this.chart.options.scales.y.title.font.size=this.getResponsiveFontSize(14),this.chart.options.scales.y.ticks.font.size=this.getResponsiveFontSize(10),this.chart.options.scales.x.ticks.maxTicksLimit=this.getResponsiveTicksLimit();const t=window.innerWidth;this.chart.options.plugins.legend.position=t<768?"bottom":"top",this.chart.update()}};const o=class{constructor(t,e){this.transactionManager=t,this.chartManager=e,this.language=localStorage.getItem("preferredLanguage"),this.initializeElements(),this.initializeEventListeners(),this.body=document.body,this.updateLanguage(),window.addEventListener("languageChange",(()=>{this.updateLanguage(),this.updateBalance(),this.updateTransactionsDisplay(),this.chartManager.updateChart()})),window.addEventListener("transactionAdded",(()=>{this.updateTransactionsDisplay(),this.updateBalance(),this.chartManager.updateChart()})),window.addEventListener("transactionsCleared",(()=>{this.clearTransactionsDisplay(),this.updateBalance(),this.chartManager.updateChart()})),window.addEventListener("transactionDeleted",(()=>{this.updateTransactionsDisplay(),this.updateBalance(),this.chartManager.updateChart()})),window.addEventListener("transactionsLoaded",(()=>{this.updateTransactionsDisplay(),this.updateBalance(),this.chartManager.updateChart()})),window.addEventListener("online",(async()=>{console.log("Connection restored. Starting synchronization..."),await this.transactionManager.syncTransactions()}))}initializeElements(){Object.entries({income:"#income-area",outcome:"#expenses-area",money:"#available-money",addTransactionPanel:"#addTransactionModal",addBtn:"#add-transaction",saveBtn:"#saveTransaction",cancelBtn:".cancel",deleteAllBtn:"#delete-all",lightBtn:"#light-mode",darkBtn:"#dark-mode",nameInput:"#name",amountInput:"#amount",transactionTypeSelect:"#transaction-type",incomeCategorySelect:"#income-category",expenseCategorySelect:"#expense-category",deleteAllModal:"#confirmationModal",deleteTransactionModal:"#deleteTransactionModal",confirmDeleteBtn:"#confirmDelete",cancelDeleteBtn:"#cancelDelete",confirmDeleteTransactionBtn:"#confirmDeleteTransaction",cancelDeleteTransactionBtn:"#cancelDeleteTransaction",incomeTitle:"#income-tab",expensesTitle:"#expenses-tab"}).forEach((([t,e])=>{this[t]=document.querySelector(e)}))}initializeEventListeners(){const t={addBtn:()=>this.showPanel(),saveBtn:()=>this.saveTransaction(),deleteAllBtn:()=>this.showDeleteAllModal(),transactionTypeSelect:()=>this.handleTransactionTypeChange(),confirmDeleteBtn:()=>this.deleteAllTransactions(),cancelDeleteBtn:()=>this.hideDeleteAllModal(),confirmDeleteTransactionBtn:()=>this.confirmDeleteTransaction(),cancelDeleteTransactionBtn:()=>this.hideDeleteTransactionModal()};Object.entries(t).forEach((([t,e])=>{this[t]?this[t].addEventListener("change"in this[t]?"change":"click",e.bind(this)):console.warn(`Element ${t} not found`)}))}setLanguage(t){this.language=t,localStorage.setItem("preferredLanguage",t),this.transactionManager.updateCurrencyBasedOnLanguage(t),this.updateLanguage(),this.updateBalance(),this.updateTransactionsDisplay(),this.chartManager.updateChart()}showPanel(){new bootstrap.Modal(this.addTransactionPanel).show(),this.handleTransactionTypeChange()}closePanel(){const t=bootstrap.Modal.getInstance(this.addTransactionPanel);t&&t.hide(),this.clearInputs()}handleTransactionTypeChange(){const t="income"===this.transactionTypeSelect.value;this.incomeCategorySelect.closest(".mb-3").style.display=t?"block":"none",this.expenseCategorySelect.closest(".mb-3").style.display=t?"none":"block"}async saveTransaction(){if(this.nameInput.value&&this.amountInput.value&&this.transactionTypeSelect.value){const t="income"===this.transactionTypeSelect.value,e=t?this.incomeCategorySelect:this.expenseCategorySelect,a=e.options[e.selectedIndex].text,n=t?Math.abs(parseFloat(this.amountInput.value)):-Math.abs(parseFloat(this.amountInput.value));await this.transactionManager.createNewTransaction(this.nameInput.value,n,a),this.closePanel()}else alert("pl"===this.language?"Wprowadź wszystkie dane":"Enter all data")}updateTransactionsDisplay(){this.clearTransactionsDisplay(),this.transactionManager.transactions.length?this.transactionManager.transactions.forEach((t=>{this.addTransactionToDOM(t)})):console.log("No transactions to display.")}updateBalance(){const t=this.transactionManager.getCurrentBalance();this.money.textContent=`${t.toFixed(2)}${this.transactionManager.currencySymbol}`}clearTransactionsDisplay(){this.income.innerHTML="",this.outcome.innerHTML=""}addTransactionToDOM(t){const e=t.category,a=document.createElement("div");a.classList.add("transaction-item"),a.classList.add(t.amount>0?"income-item":"expense-item"),a.setAttribute("id",t.id);const n=this.getCategoryIcon(t.category);a.innerHTML=`\n    <div class="transaction-details">\n      <div class="transaction-name">\n        <span class="category-icon">${n}</span>\n        <span class="transaction-title">${t.name}</span>\n      </div>\n      <div class="transaction-category" data-lang-key="${e}">${e}</div>\n    </div>\n    <div class="transaction-amount ${t.amount>0?"income":"expense"}">\n      ${Math.abs(t.amount).toFixed(2)}${this.transactionManager.currencySymbol}\n    </div>\n    <button class="delete-transaction" aria-label="Usuń transakcję">\n      <i class="fas fa-times"></i>\n    </button>\n  `,a.querySelector(".delete-transaction").addEventListener("click",(()=>{this.showDeleteTransactionModal(t.id)})),(t.amount>0?this.income:this.outcome).appendChild(a)}clearInputs(){[this.nameInput,this.amountInput].forEach((t=>t.value="")),this.transactionTypeSelect.selectedIndex=0}showDeleteAllModal(){new bootstrap.Modal(this.deleteAllModal).show()}hideDeleteAllModal(){const t=bootstrap.Modal.getInstance(this.deleteAllModal);t&&t.hide()}async deleteAllTransactions(){await this.transactionManager.deleteAllTransactions(),this.clearTransactionsDisplay(),this.updateBalance(),this.chartManager.updateChart(),this.hideDeleteAllModal()}showDeleteTransactionModal(t){if(!t)return void console.error("Invalid transaction ID:",t);this.deleteTransactionModal.dataset.transactionId=t;new bootstrap.Modal(this.deleteTransactionModal).show()}hideDeleteTransactionModal(){const t=bootstrap.Modal.getInstance(this.deleteTransactionModal);t&&t.hide()}async confirmDeleteTransaction(){const t=this.deleteTransactionModal.dataset.transactionId;t?(await this.deleteTransaction(t),this.hideDeleteTransactionModal()):console.error("Invalid transaction ID:",t)}async deleteTransaction(t){await this.transactionManager.deleteTransaction(t);const e=document.getElementById(t);e&&e.remove(),this.updateBalance(),this.chartManager.updateChart()}updateLanguage(){this.language=localStorage.getItem("preferredLanguage")}getCategoryIcon(t){if(!t||"string"!=typeof t)return'<i class="fas fa-question-circle"></i>';return`<i class="me-1 fas ${{wypłata:"fa-money-bill-wave",salary:"fa-money-bill-wave",premia:"fa-gift",bonus:"fa-gift",prezent:"fa-gift",gift:"fa-gift",inne:"fa-question-circle",other:"fa-question-circle",zakupy:"fa-cart-arrow-down",shopping:"fa-cart-arrow-down",jedzenie:"fa-hamburger",food:"fa-hamburger",kino:"fa-film",cinema:"fa-film",transport:"fa-bus"}[t.toLowerCase()]||"fa-question-circle"}"></i>`}};const r=class{constructor(){this.themeToggle=document.getElementById("theme-toggle"),this.body=document.body,this.currentTheme=localStorage.getItem("theme")||"light",this.initTheme(),this.addEventListeners()}initTheme(){this.setTheme(this.currentTheme)}addEventListeners(){this.themeToggle.addEventListener("click",(()=>this.toggleTheme()))}toggleTheme(){this.currentTheme="light"===this.currentTheme?"dark":"light",this.setTheme(this.currentTheme)}setTheme(t){this.currentTheme=t,this.body.classList.remove("light-theme","dark-theme"),this.body.classList.add(`${this.currentTheme}-theme`),localStorage.setItem("theme",this.currentTheme),this.updateToggleButton();const e=new CustomEvent("themeChange",{detail:{theme:this.currentTheme}});window.dispatchEvent(e)}updateToggleButton(){"dark"===this.currentTheme?(this.themeToggle.innerHTML='<i class="fas fa-sun"></i>',this.themeToggle.setAttribute("aria-label","Switch to light mode")):(this.themeToggle.innerHTML='<i class="fas fa-moon"></i>',this.themeToggle.setAttribute("aria-label","Switch to dark mode"))}};class c{constructor(){this.deferredPrompt=null,this.installButton=document.querySelector(".installButton"),this.init()}init(){window.matchMedia("(display-mode: standalone)").matches?this.hideInstallButton():(window.addEventListener("beforeinstallprompt",(t=>{t.preventDefault(),this.deferredPrompt=t,this.showInstallButton()})),!1===navigator.standalone&&/iPhone|iPad|iPod/.test(navigator.userAgent)&&this.showIOSInstallInstructions(),window.addEventListener("appinstalled",(()=>{this.hideInstallButton()})),this.installButton&&this.installButton.addEventListener("click",(()=>this.installPWA())))}showInstallButton(){this.installButton&&(this.installButton.style.display="block")}hideInstallButton(){this.installButton&&(this.installButton.style.display="none")}showIOSInstallInstructions(){const t=document.createElement("div");t.innerHTML='\n      <p>To install this app on iOS:</p>\n      <ol>\n        <li>Tap the "Share" icon in your browser.</li>\n        <li>Select "Add to Home Screen".</li>\n      </ol>\n    ',document.body.appendChild(t)}installPWA(){this.deferredPrompt?(this.deferredPrompt.prompt(),this.deferredPrompt.userChoice.then((t=>{"accepted"===t.outcome&&this.hideInstallButton(),this.deferredPrompt=null}))):/iPhone|iPad|iPod/.test(navigator.userAgent)&&alert('To install the app, use the "Add to Home Screen" option from the browser\'s share menu.')}}class l{constructor(){this.translationManager=new t,this.databaseManager=new n,this.transactionManager=new s,this.chartManager=new i(this.transactionManager),this.uiManager=new o(this.transactionManager,this.chartManager),this.themeManager=new r,this.pwaManager=new c,this.initLanguageSettings(),this.setupEventListeners()}initLanguageSettings(){const t=this.translationManager.currentLanguage;this.translationManager.setLanguage(t),this.uiManager.setLanguage(t),document.addEventListener("languageChanged",(t=>{const e=t.detail.language;this.uiManager.setLanguage(e),this.chartManager.updateLanguage()}))}setupEventListeners(){window.addEventListener("transactionsLoaded",(()=>{this.uiManager.updateTransactionsDisplay(),this.uiManager.updateBalance(),this.chartManager.updateChart()})),window.addEventListener("themeChange",(()=>{const t=document.body.classList.contains("dark-theme");this.chartManager.setTheme(t)}))}isPWA(){return window.matchMedia("(display-mode: standalone)").matches}isDocker(){return"docker"==="MISSING_ENV_VAR".ENVIRONMENT||!1}}new l})();