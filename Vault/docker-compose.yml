services:
  vault-web:
    build: ./nginx  # Ścieżka do Dockerfile w katalogu nginx
    ports:
      - "80:80"  # Przekierowanie portu 80 na zewnątrz
    depends_on:
      - vault-app  # Nginx czeka na gotowość serwera aplikacji
    networks:
      - vault-network  # Serwis podłączony do tej samej sieci co aplikacja
    restart: unless-stopped  # Automatyczny restart w razie awarii
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80

  vault-app:
    build: ./app  # Ścieżka do Dockerfile w katalogu app
    ports:
      - "3000:3000"  # Przekierowanie portu 3000 na zewnątrz
    expose:
      - "3000"  # Udostępnienie portu 3000 wewnątrz sieci dla Nginx
    environment:
      - PORT=3000
      - MONGO_URL=mongodb://vault-mongo:27017/mydatabase
    depends_on:
      - vault-mongo  # Aplikacja czeka na gotowość MongoDB
    networks:
      - vault-network  # Serwis podłączony do tej samej sieci co web
    restart: unless-stopped  # Automatyczny restart w razie awarii

  vault-mongo:
    image: mongo:4.4  # Wersja MongoDB
    ports:
      - "27017:27017"  # Przekierowanie portu MongoDB na zewnątrz
    volumes:
      - mongo-data:/data/db  # Dane MongoDB będą zapisywane na woluminie
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin  # Dane logowania MongoDB
      - MONGO_INITDB_ROOT_PASSWORD=secret
    networks:
      - vault-network  # MongoDB w tej samej sieci co aplikacja i Nginx
    healthcheck:
      test: "echo 'db.runCommand(\"ping\").ok' | mongo localhost:27017/test --quiet"  # Sprawdzanie zdrowia kontenera
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped  # Automatyczny restart w razie awarii

volumes:
  mongo-data: {}  # Definicja woluminu dla MongoDB

networks:
  vault-network:
    driver: bridge  # Sieć typu bridge umożliwiająca komunikację między serwisami
